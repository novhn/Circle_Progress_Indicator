// Generated by CoffeeScript 1.10.0
var app;

app = angular.module('CircleProgressApp', []);

app.controller('ProgressController', function($scope) {
  $scope.data = {
    actualName: 'Actual',
    expectedName: 'Expected',
    actual: 0.3,
    expected: 0.2,
    diff: function() {
      return $scope.data.actual - $scope.data.expected;
    },
    color: function() {
      if ($scope.data.diff() <= -0.50) {
        return 'red';
      } else if ($scope.data.diff() <= -0.25) {
        return 'orange';
      } else {
        return 'green';
      }
    }
  };
  return $scope.round = function(input) {
    return Math.round(input * 10000) * 100 / 10000;
  };
});

app.directive('inputValidation', function() {
  return {
    restrict: 'EA',
    template: '{{inputName}}: <input name="{{inputName}}" type="number" step="0.01" ng-model="inputValue"/><br>',
    scope: {
      inputValue: '=',
      inputName: '='
    },
    link: function(scope) {
      return scope.$watch('inputValue', function(newValue, oldValue) {
        var arr;
        arr = String(newValue);
        if (oldValue === null && newValue === void 0) {
          scope.inputValue = 0;
          return;
        }
        if (arr.length === 0) {
          return;
        }
        if (arr.length === 1 && arr[0] === '.') {
          return;
        }
        if (isNaN(newValue)) {
          scope.inputValue = oldValue;
        }
        if (arr.includes("-")) {
          scope.inputValue = oldValue;
        }
        if (newValue > 1.0) {
          return scope.inputValue = oldValue;
        }
      });
    }
  };
});

app.directive('d3CircleIndicator', function() {
  return {
    restrict: 'EA',
    template: '<svg width=\'300\' height=\'300\'></svg>',
    scope: {
      data: '='
    },
    link: function(scope) {

      /* watch for data changes and re-render */
      var arc, arcTween, arcs, canvas, data, group, height, p, path, pi180, width;
      scope.$watch('data', (function(newVals, oldVals) {
        return scope.render(newVals);
      }), true);

      /* arc interpolate function */
      arcTween = function(transition, newSize) {
        return transition.attrTween('d', function(d) {
          var interpolate;
          interpolate = d3.interpolate(d.size, newSize);
          return function(t) {
            d.size = interpolate(t);
            return arc(d);
          };
        });
      };

      /* update widget on new data */
      scope.render = function(data) {

        /* update progress arcs with new lengths */
        path.filter(function(d) {
          return d.id === 'outer_arc';
        }).transition().duration(1000).call(arcTween, scope.data.actual * 360);
        path.filter(function(d) {
          return d.id === 'inner_arc';
        }).transition().duration(1000).call(arcTween, scope.data.expected * 360);

        /* update actual progress arc color */
        d3.select('#outer_arc').transition().duration(2000).style('fill', scope.data.color());

        /* update text representation of actual % complete */
        return d3.select('.number_actual').text(Math.round(scope.data.actual * 10 * 100) / 10 + '%');
      };

      /* canvas size */
      width = 300;
      height = 300;

      /* getting out degrees-to-radians on */
      p = Math.PI * 2;
      pi180 = p / 360;

      /* specify the arc in initial size */
      data = [
        {
          id: 'outer_arc',
          irad: 88,
          orad: 100,
          start: 0,
          size: 0,
          color: 'green'
        }, {
          id: 'inner_arc',
          irad: 80,
          orad: 86,
          start: 0,
          size: 0,
          color: 'lightgreen'
        }, {
          id: 'center_circle',
          irad: 0,
          orad: 78,
          start: 0,
          size: 360,
          color: 'lightgrey'
        }
      ];

      /* init canvas */
      canvas = d3.select('svg').append('svg').attr('width', width).attr('height', height).attr('id', 'circleind');

      /* set the center of the drawing canvas */
      group = canvas.append('g').attr('transform', 'translate(150,150)');

      /* generate arc */
      arc = d3.svg.arc().innerRadius(function(d, i) {
        return d.irad;
      }).outerRadius(function(d, i) {
        return d.orad;
      }).cornerRadius(10).startAngle(function(d, i) {
        return pi180 * d.start;
      }).endAngle(function(d, i) {
        return pi180 * (d.start + d.size);
      });

      /* stylize arcs and set attributes */
      arcs = group.selectAll('.arc').data(data).enter().append('g').attr('class', 'arc').attr('id', function(d, i) {
        return d.id;
      }).style('fill', function(d, i) {
        return d.color;
      });

      /* append arcs to path */
      path = arcs.append('path').attr('d', arc);

      /* generate progress text at center of widget */
      d3.select('#center_circle').append('text').text('Progress').attr('fill', 'grey').attr('font-family', 'verdana').attr('font-size', '20px').attr('transform', 'translate(0,25)').style('text-anchor', 'middle');
      return d3.select('#center_circle').append('text').attr('fill', 'black').attr('font-family', 'verdana').attr('font-size', '36px').attr('transform', 'translate(0,5)').attr('class', 'number_actual').style('text-anchor', 'middle');
    }
  };
});
